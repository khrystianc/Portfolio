Microsoft (R) Macro Assembler Version 14.28.29334.0	    06/07/21 13:33:49
;Designing low-level I/O procedures     (Prog6-ClarkKhr.asm  Page 1 - 1


				TITLE Designing low-level I/O procedures     (Prog6-ClarkKhr.asm)

				; Author: Khrystian Clark  
				; Last Modified: 12/8/2020
				; OSU email address: CLARKKHR@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:     6            Due Date: 12/6/2020
				; Description: This program takes on the user input of 10 signed integers and returns the integers, the sum of all integers and the average.
				;              Contstraints of using macros to get and display numbers, amidst converting them from string inputs.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;  constants
 =-80000000			NUM_LO		EQU  -2147483648 ; highest and lowest possible signed integer
 = 7FFFFFFF			NUM_HI		EQU  2147483647
 = 0000000A			ARRAYSIZE		EQU  10
 = 0000000B			MAXSIZE = 11

				;  macros
				mGetString	MACRO	inString, strLen
							PUSH		EDX
							PUSH		ECX
							mDisplayString user_prompt
							MOV		EDX, offset inString
							MOV		ECX, MAXSIZE
							CALL		ReadString
							MOV       sLen, EAX
							POP		ECX
							POP		EDX
				ENDM
				mDisplayString MACRO	string
							PUSH		EDX
							MOV		EDX, offset string
							CALL      WriteString
							POP		EDX
				ENDM
 00000000			.data
				;  Strings
 00000000 50 52 4F 47 52	intro1      BYTE  "PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures", 0
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   00
 0000003D 57 72 69 74 74	intro2      BYTE  "Written by: Khrystian Clark", 0
	   65 6E 20 62 79
	   3A 20 4B 68 72
	   79 73 74 69 61
	   6E 20 43 6C 61
	   72 6B 00
 00000059 50 6C 65 61 73	prompt1     BYTE  "Please provide 10 signed decimal integers", 0
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 00
 00000083 45 61 63 68 20	rules1      BYTE  "Each number needs to be small enough to fit inside a 32 bit register.", 0
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 00
 000000C9 41 66 74 65 72	rules2      BYTE  "After you have finished inputting the raw numbers I will display a", 0
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 00
 0000010C 6C 69 73 74 20	rules3      BYTE  "list of the integers, their sum, and their average value.", 0
	   6F 66 20 74 68
	   65 20 69 6E 74
	   65 67 65 72 73
	   2C 20 74 68 65
	   69 72 20 73 75
	   6D 2C 20 61 6E
	   64 20 74 68 65
	   69 72 20 61 76
	   65 72 61 67 65
	   20 76 61 6C 75
	   65 2E 00
 00000146 45 52 52 4F 52	err_msg     BYTE  "ERROR: You did not enter a signed number or your number was too big.", 0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 00
 0000018B 50 6C 65 61 73	user_prompt BYTE  "Please enter a signed number: ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 000001AA 59 6F 75 20 65	num_show    BYTE  "You entered the following numbers: ", 0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   00
 000001CE 2C 20 00		comma 	  BYTE  ", ", 0
 000001D1 54 68 65 20 73	sum_show    BYTE  "The sum offset these numbers is: ", 0
	   75 6D 20 6F 66
	   66 73 65 74 20
	   74 68 65 73 65
	   20 6E 75 6D 62
	   65 72 73 20 69
	   73 3A 20 00
 000001F3 54 68 65 20 72	avg_show    BYTE  "The rounded average is: ", 0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 00
 0000020C 54 68 61 6E 6B	goodbye     BYTE  "Thanks for playing!", 0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 00
 00000220 2D 00			neg_symbol  BYTE  "-", 0
				; lists and variables
 00000222 00000000		sLen        DWORD ?
 00000226  00000020 [		user_input  BYTE  32  DUP(?)  
	    00
	   ]
 00000246  0000000A [		numArray    DWORD ARRAYSIZE DUP(?)   ; initialize the array of 10 elements, with no value yet
	    00000000
	   ]
 0000026E 00000004		numType     DWORD TYPE numArray
 00000272 0000000A		arrayCount  DWORD LENGTHOF numArray  ; count of elements in the array
 00000276 00000028		numByte     DWORD SIZEOF numArray    ; arrayCount x typeArray
 0000027A 00000000		sum         DWORD 0
 0000027E 00000000		avg         DWORD ?
 00000282 00000000		new_num     DWORD ?                  ; placeholder for the output of writeval
 00000286 00000000		counter     DWORD 0
 00000000			.code
 00000000			main PROC
 00000000  E8 00000068			CALL introduction
					; convert string to integer
 00000005  FF 35 0000027A R		PUSH sum
 0000000B  68 0000026E R		PUSH offset numType	    ;32
 00000010  68 00000220 R		PUSH offset neg_symbol  ;28
 00000015  68 00000226 R		PUSH offset user_input  ;24
 0000001A  68 00000146 R		PUSH offset err_msg     ;20
 0000001F  68 0000018B R		PUSH offset user_prompt ;16
					PUSH DWORD counter
Prog6-ClarkKhr.asm(74) : error A2206:missing operator in expression
 00000024  68 00000246 R		PUSH offset numArray
 00000029  E8 000000EC			CALL ReadVal
					; Convert to printable digits
 0000002E  68 00000282 R		PUSH offset new_num     ;32
 00000033  68 000001F3 R		PUSH offset avg_show    ;28
 00000038  68 000001D1 R		PUSH offset sum_show    ;24
 0000003D  68 000001CE R		PUSH offset comma	    ;20
 00000042  68 000001AA R		PUSH offset num_show    ;16
 00000047  FF 35 0000027A R		PUSH sum			    ;12
 0000004D  68 00000246 R		PUSH offset numArray    ;8
 00000052  E8 00000166			CALL WriteVal

 00000057  E8 00000205			CALL farewell
					exit
 0000005C  6A 00	   *	    push   +000000000h
 0000005E  E8 00000000 E   *	    call   ExitProcess
 00000063			main ENDP

				; ---------------------------------------------------------------------------------
				; Name: introduction
				;
				; Prints the programmer's name, the program title and instructions
				;
				; Preconditions: all variables are type BYTE. Uses Macro m DisplayString to display output
				;
				; Postconditions: Changes edx register. 
				;
				; Receives:
				;		intro1,2       = string BYTE containing the program introduction
				;		author		= string BYTE containing the programmer name
				;		prompt1		= string BYTE containing the prompting line if instruction
				;		rules1,2,3	= string BYTEs containing the lines of instruction and constraints
				;
				; Returns: edx			= program_name, intro, author, instructions printed out
				; ---------------------------------------------------------------------------------
 00000063			introduction PROC
 00000063  55				PUSH EBP
 00000064  8B EC			MOV  EBP, ESP

 00000066  8B 55 08			MOV  EDX, [EBP+8]
					mDisplayString EDX      ; Display title
 00000069  52		     1				PUSH		EDX
			     1				MOV		EDX, offset EDX
Prog6-ClarkKhr.asm(113) : error A2032:invalid use of register
 mDisplayString(2): Macro Called From
  Prog6-ClarkKhr.asm(113): Main Line Code
 0000006A  E8 00000000 E     1				CALL      WriteString
 0000006F  5A		     1				POP		EDX
 00000070  E8 00000000 E		CALL Crlf
 00000075  8B 55 0C			MOV  EDX, [EBP+12]
					mDisplayString EDX      ; Display author
 00000078  52		     1				PUSH		EDX
			     1				MOV		EDX, offset EDX
Prog6-ClarkKhr.asm(116) : error A2032:invalid use of register
 mDisplayString(2): Macro Called From
  Prog6-ClarkKhr.asm(116): Main Line Code
 00000079  E8 00000000 E     1				CALL      WriteString
 0000007E  5A		     1				POP		EDX
 0000007F  E8 00000000 E		CALL Crlf
 00000084  E8 00000000 E		CALL Crlf
 00000089  8B 55 10			MOV  EDX, [EBP+16]
					mDisplayString EDX      ; Tell the user what to do
 0000008C  52		     1				PUSH		EDX
			     1				MOV		EDX, offset EDX
Prog6-ClarkKhr.asm(120) : error A2032:invalid use of register
 mDisplayString(2): Macro Called From
  Prog6-ClarkKhr.asm(120): Main Line Code
 0000008D  E8 00000000 E     1				CALL      WriteString
 00000092  5A		     1				POP		EDX
 00000093  E8 00000000 E		CALL Crlf
 00000098  8B 55 14			MOV  EDX, [EBP+20]
					mDisplayString EDX      ; Describe contraints
 0000009B  52		     1				PUSH		EDX
			     1				MOV		EDX, offset EDX
Prog6-ClarkKhr.asm(123) : error A2032:invalid use of register
 mDisplayString(2): Macro Called From
  Prog6-ClarkKhr.asm(123): Main Line Code
 0000009C  E8 00000000 E     1				CALL      WriteString
 000000A1  5A		     1				POP		EDX
 000000A2  E8 00000000 E		CALL Crlf
 000000A7  8B 55 18			MOV  EDX, [EBP+24]
					mDisplayString EDX
 000000AA  52		     1				PUSH		EDX
			     1				MOV		EDX, offset EDX
Prog6-ClarkKhr.asm(126) : error A2032:invalid use of register
 mDisplayString(2): Macro Called From
  Prog6-ClarkKhr.asm(126): Main Line Code
 000000AB  E8 00000000 E     1				CALL      WriteString
 000000B0  5A		     1				POP		EDX
 000000B1  E8 00000000 E		CALL Crlf	
 000000B6  8B 55 1C			MOV  EDX, [EBP+28]
					mDisplayString EDX
 000000B9  52		     1				PUSH		EDX
			     1				MOV		EDX, offset EDX
Prog6-ClarkKhr.asm(129) : error A2032:invalid use of register
 mDisplayString(2): Macro Called From
  Prog6-ClarkKhr.asm(129): Main Line Code
 000000BA  E8 00000000 E     1				CALL      WriteString
 000000BF  5A		     1				POP		EDX
 000000C0  E8 00000000 E		CALL Crlf
 000000C5  E8 00000000 E		CALL Crlf

 000000CA  5D				POP  EBP
 000000CB  C2 0018			RET  24
 000000CE			introduction ENDP

 000000CE			ReadVal PROC
 000000CE  55				PUSH EBP
 000000CF  8B EC			MOV  EBP, ESP
					; receive string input
 000000D1  B9 0000000A			MOV  ECX, 10				; set the outer loop counter
 000000D6  8B 7D 08			MOV  EDI, [EBP+8]              ; Put the num Array in the EDI reg
 00000125			get_nums:
					mGetString user_prompt, user_input
 00000125  52		     1				PUSH		EDX
 00000126  51		     1				PUSH		ECX
 00000127  52		     2				PUSH		EDX
 00000128  BA 0000018B R     2				MOV		EDX, offset user_prompt
 0000012D  E8 00000000 E     2				CALL      WriteString
 00000132  5A		     2				POP		EDX
 00000133  BA 0000018B R     1				MOV		EDX, offset user_prompt
 00000138  B9 0000000B	     1				MOV		ECX, MAXSIZE
 0000013D  E8 00000000 E     1				CALL		ReadString
 00000142  A3 00000222 R     1				MOV       sLen, EAX
 00000147  59		     1				POP		ECX
 00000148  5A		     1				POP		EDX
 00000149  83 F8 0B			CMP  EAX, 11
 0000014C  7F 55			JG   invalid_input
 0000014E  8B 75 18			MOV  ESI, [EBP+24]
 00000151  89 45 0C			MOV	[EBP+12], EAX            ;set the inner count
 00000154  8B 5D 1C			MOV  EBX, [EBP+28]
					CMP  BYTE PTR [ESI], EBX
Prog6-ClarkKhr.asm(150) : error A2022:instruction operands must be the same size
 00000157  74 15			JE   neg_conversion
 00000159  83 F8 0A			CMP  EAX, 10
 0000015C  7F 45			JG   invalid_input
 0000015E  EB 11			JMP  conversion
					; Convert to signed integer, using LODSB/STOSB
 0000016E			neg_conversion:
 0000016E  B5 01			MOV  CH, 1                     ;set the negative flag
 00000170  46				INC  ESI                       ; move to the next value in the ESI
					DEC  [EBP+12]
Prog6-ClarkKhr.asm(159) : error A2023:instruction operand must have size
 00000171			conversion:
 00000171  8A 06			MOV  AL, [ESI]
 00000173  2C 30			SUB  AL, 48                    ; convert ASCII
 00000175  0F B6 C0			MOVZX EAX, AL                 ; place convert ascii digit into the EAX reg
 00000178  BB 0000000A			MOV  EBX, 10                   ; set the multiplier since were are parsing through one digit at a time
 0000017D			next_digit:
 0000017D  46				INC  ESI                       ; point ESI at next digit
					DEC  [EBP+12]
Prog6-ClarkKhr.asm(167) : error A2023:instruction operand must have size
 0000017E  F7 E3			MUL  EBX
 00000180  8A 16			MOV  DL, [ESI]
 00000182  80 EA 30			SUB  DL, 48
					MOV  EDX, DL
Prog6-ClarkKhr.asm(171) : error A2070:invalid instruction operands
 00000185  03 C2			ADD  EAX, EDX
					CMP  [EBP+12], 0
Prog6-ClarkKhr.asm(173) : error A2070:invalid instruction operands
 00000187  7F F4			JG   next_digit
 00000189  EB 00			JMP  check_neg
 0000018B			check_neg:
 0000018B  80 FD 01			CMP  CH, 1
 0000018E  75 02			JNE  in_array
 00000190  F7 D8			NEG  EAX                       ; Make the value at EAX negative and continue to put it in the array
					; add item to array
 00000192			in_array:
 00000192  89 07			MOV  [EDI], EAX
 00000194  03 7D 20			ADD  EDI, [EBP+32]
 00000197  EB 00			JMP  get_sum
					; add item to current sum
 00000199			get_sum:
 00000199  01 45 24			ADD  [EBP+36], EAX
 0000019C  E8 00000000 E		CALL Crlf
 000001A1  E2 82			LOOP get_nums                  ; repeat loop until array has 10 elements
					; show error message
 000001A3			invalid_input:
					mDisplayString err_msg
 000001A3  52		     1				PUSH		EDX
 000001A4  BA 00000146 R     1				MOV		EDX, offset err_msg
 000001A9  E8 00000000 E     1				CALL      WriteString
 000001AE  5A		     1				POP		EDX
 000001AF  E8 00000000 E		CALL Crlf
 000001B4  E9 FFFFFF6C			JMP  get_nums

 000001B9			done:
 000001B9  5D				POP  EBP
 000001BA  C2 0020			RET  32
 000001BD			ReadVal ENDP

 000001BD			WriteVal PROC
 000001BD  55				PUSH EBP
 000001BE  8B EC			MOV  EBP, ESP
 000001C0  8B 7D 20			MOV  EDI, [EBP+32]
					mDisplayString num_show
 000001C3  52		     1				PUSH		EDX
 000001C4  BA 000001AA R     1				MOV		EDX, offset num_show
 000001C9  E8 00000000 E     1				CALL      WriteString
 000001CE  5A		     1				POP		EDX
 000001CF  8B 75 08			MOV  ESI, [EBP+8]
 000001D2  B9 0000000A			MOV  ECX, ARRAYSIZE
 000001D7  BB 00000000			MOV  EBX, 0
 000001DC  FC				CLD
 000001DD			checkNum:
 000001DD  AC				LODSB
 000001DE  50				PUSH EAX
 000001DF  01 45 0C			ADD  [EBP+12], EAX
 000001E2  BB 0000000A			MOV  EBX, 10                ; for single digit division
 000001E7			onebyone:
 000001E7  33 D2			XOR  EDX, EDX               ; clear EDX reg
 000001E9  F7 F3			DIV  EBX
 000001EB  83 C2 30			ADD  EDX, 48                ; find ASCII value
 000001EE  52				PUSH EDX
 000001EF  85 C0			TEST EAX, EAX               ; check if zero without changing the value
 000001F1  75 F4			JNZ  onebyone
 000001F3  5A				POP  EDX
 000001F4			conversion:
 000001F4  AA				STOSB
 000001F5  89 55 20			MOV  [EBP+32], EDX          ; value of EDX in the new_num place
					mDisplayString new_num
 000001F8  52		     1				PUSH		EDX
 000001F9  BA 00000282 R     1				MOV		EDX, offset new_num
 000001FE  E8 00000000 E     1				CALL      WriteString
 00000203  5A		     1				POP		EDX
 00000204  5A				POP  EDX
 00000205  3B E5			CMP  ESP, EBP
 00000207  75 EB			JNE  conversion
 00000209  33 C0			XOR  EAX, EAX
 0000020B  AA				STOSB
 0000020C  03 D8			ADD  EBX, EAX
 0000020E  83 F9 01			CMP  ECX, 1
 00000211  74 0C			JE   nextDigit
					mDisplayString comma
 00000213  52		     1				PUSH		EDX
 00000214  BA 000001CE R     1				MOV		EDX, offset comma
 00000219  E8 00000000 E     1				CALL      WriteString
 0000021E  5A		     1				POP		EDX
 0000021F			nextDigit:
 0000021F  E2 BC			LOOP checkNum
					; get the sum printed
 00000221  E8 00000000 E		CALL Crlf
					mDisplayString sum_show
 00000226  52		     1				PUSH		EDX
 00000227  BA 000001D1 R     1				MOV		EDX, offset sum_show
 0000022C  E8 00000000 E     1				CALL      WriteString
 00000231  5A		     1				POP		EDX
 00000232  8B 45 0C			MOV  EAX, [EBP+12]
 00000235  E8 00000000 E		CALL WriteDec
 0000023A  E8 00000000 E		CALL Crlf
					; get the average printed
					mDisplayString avg_show
 0000023F  52		     1				PUSH		EDX
 00000240  BA 000001F3 R     1				MOV		EDX, offset avg_show
 00000245  E8 00000000 E     1				CALL      WriteString
 0000024A  5A		     1				POP		EDX
 0000024B  99				CDQ
 0000024C  BB 0000000A			MOV  EBX, ARRAYSIZE
 00000251  F7 F3			DIV  EBX
 00000253  E8 00000000 E		CALL WriteDec
 00000258  E8 00000000 E		CALL Crlf
 0000025D			finish:
 0000025D  5D				POP  EBP
 0000025E  C2 000C			RET  12
 00000261			WriteVal ENDP

 00000261			farewell PROC
 00000261  E8 00000000 E		CALL Crlf
 00000266  E8 00000000 E		CALL Crlf
					mDisplayString goodbye
 0000026B  52		     1				PUSH		EDX
 0000026C  BA 0000020C R     1				MOV		EDX, offset goodbye
 00000271  E8 00000000 E     1				CALL      WriteString
 00000276  5A		     1				POP		EDX
 00000277  E8 00000000 E		CALL Crlf
 0000027C  C3				RET
 0000027D			farewell ENDP

				END main
Microsoft (R) Macro Assembler Version 14.28.29334.0	    06/07/21 13:33:49
;Designing low-level I/O procedures     (Prog6-ClarkKhr.asm  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000028A Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000027D Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 0000011A _TEXT	Length= 000000A3 Public STDCALL
  get_nums . . . . . . . . . . .	L Near	 00000125 _TEXT	
  neg_conversion . . . . . . . .	L Near	 0000016E _TEXT	
  conversion . . . . . . . . . .	L Near	 00000171 _TEXT	
  next_digit . . . . . . . . . .	L Near	 0000017D _TEXT	
  check_neg  . . . . . . . . . .	L Near	 0000018B _TEXT	
  in_array . . . . . . . . . . .	L Near	 00000192 _TEXT	
  get_sum  . . . . . . . . . . .	L Near	 00000199 _TEXT	
  invalid_input  . . . . . . . .	L Near	 000001A3 _TEXT	
  done . . . . . . . . . . . . .	L Near	 000001B9 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000001BD _TEXT	Length= 000000A4 Public STDCALL
  checkNum . . . . . . . . . . .	L Near	 000001DD _TEXT	
  onebyone . . . . . . . . . . .	L Near	 000001E7 _TEXT	
  conversion . . . . . . . . . .	L Near	 000001F4 _TEXT	
  nextDigit  . . . . . . . . . .	L Near	 0000021F _TEXT	
  finish . . . . . . . . . . . .	L Near	 0000025D _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
farewell . . . . . . . . . . . .	P Near	 00000261 _TEXT	Length= 0000001C Public STDCALL
introduction . . . . . . . . . .	P Near	 0000006D _TEXT	Length= 000000AD Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000006D Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 0000000Ah   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAXSIZE  . . . . . . . . . . . .	Number	 0000000Bh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NUM_HI . . . . . . . . . . . . .	Number	 7FFFFFFFh   
NUM_LO . . . . . . . . . . . . .	Number	 -80000000h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrayCount . . . . . . . . . . .	DWord	 00000272 _DATA	
avg_show . . . . . . . . . . . .	Byte	 000001F3 _DATA	
avg  . . . . . . . . . . . . . .	DWord	 0000027E _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
comma  . . . . . . . . . . . . .	Byte	 000001CE _DATA	
counter  . . . . . . . . . . . .	DWord	 00000286 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
err_msg  . . . . . . . . . . . .	Byte	 00000146 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 0000020C _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 0000003D _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
neg_symbol . . . . . . . . . . .	Byte	 00000220 _DATA	
new_num  . . . . . . . . . . . .	DWord	 00000282 _DATA	
numArray . . . . . . . . . . . .	DWord	 00000246 _DATA	
numByte  . . . . . . . . . . . .	DWord	 00000276 _DATA	
numType  . . . . . . . . . . . .	DWord	 0000026E _DATA	
num_show . . . . . . . . . . . .	Byte	 000001AA _DATA	
prompt1  . . . . . . . . . . . .	Byte	 00000059 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rules1 . . . . . . . . . . . . .	Byte	 00000083 _DATA	
rules2 . . . . . . . . . . . . .	Byte	 000000C9 _DATA	
rules3 . . . . . . . . . . . . .	Byte	 0000010C _DATA	
sLen . . . . . . . . . . . . . .	DWord	 00000222 _DATA	
sum_show . . . . . . . . . . . .	Byte	 000001D1 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 0000027A _DATA	
user_input . . . . . . . . . . .	Byte	 00000226 _DATA	
user_prompt  . . . . . . . . . .	Byte	 0000018B _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   12 Errors
